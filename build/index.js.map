{"version":3,"sources":["../src/index.js"],"names":["url","process","env","DATA_BASE","mongoose","connect","useCreateIndex","useNewUrlParser","useFindAndModify","useUnifiedTopology","mongoDB","connection","on","console","error","bind","log","server","ApolloServer","typeDefs","resolvers","schemaDirectives","AuthDirective","context","req","introspection","playground","listen","port","PORT","then"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AAKA,IAAMA,GAAG,GAAGC,OAAO,CAACC,GAAR,CAAYC,SAAxB;;AACAC,qBAASC,OAAT,CACIL,GADJ,EAEI;AACIM,EAAAA,cAAc,EAAE,IADpB;AAEIC,EAAAA,eAAe,EAAE,IAFrB;AAGIC,EAAAA,gBAAgB,EAAE,IAHtB;AAIIC,EAAAA,kBAAkB,EAAE;AAJxB,CAFJ;;AASA,IAAMC,OAAO,GAAGN,qBAASO,UAAzB;AACAD,OAAO,CAACE,EAAR,CAAW,OAAX,EAAoBC,OAAO,CAACC,KAAR,CAAcC,IAAd,CAAmBF,OAAnB,EAA4B,oBAA5B,CAApB;AACAH,OAAO,CAACE,EAAR,CAAW,MAAX,EAAmB;AAAA,SAAMC,OAAO,CAACG,GAAR,CAAY,cAAZ,CAAN;AAAA,CAAnB;AAEA,IAAMC,MAAM,GAAG,IAAIC,0BAAJ,CAAiB;AAC9BC,EAAAA,QAAQ,EAARA,kBAD8B;AAE9BC,EAAAA,SAAS,EAATA,qBAF8B;AAG9BC,EAAAA,gBAAgB,EAAE;AAChBC,IAAAA,aAAa,EAAEA;AADC,GAHY;AAM9BC,EAAAA,OAAO;AAAA;AAAA;AAAA,iCAAE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAQC,cAAAA,GAAR,QAAQA,GAAR;AAAA,gDAAiB,6BAAWA,GAAX,CAAjB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAF;;AAAA;AAAA;AAAA;;AAAA;AAAA,KANuB;AAO9BC,EAAAA,aAAa,EAAE,IAPe;AAQ9BC,EAAAA,UAAU,EAAE;AARkB,CAAjB,CAAf;AAWAT,MAAM,CAACU,MAAP,CAAc;AAAEC,EAAAA,IAAI,EAAE3B,OAAO,CAACC,GAAR,CAAY2B,IAAZ,IAAoB;AAA5B,CAAd,EAAkDC,IAAlD,CAAuD,iBAAa;AAAA,MAAV9B,GAAU,SAAVA,GAAU;AAClEa,EAAAA,OAAO,CAACG,GAAR,yCAAmChB,GAAnC;AACD,CAFD","sourcesContent":["import { ApolloServer } from 'apollo-server';\nimport mongoose from 'mongoose';\nimport typeDefs from './graphql/schema';\nimport resolvers from './graphql/resolvers';\nimport {\n  getContext,\n  AuthDirective\n} from './graphql/actions/authActions'\n\nconst url = process.env.DATA_BASE;\nmongoose.connect(\n    url,\n    {\n        useCreateIndex: true,\n        useNewUrlParser: true,\n        useFindAndModify: true,\n        useUnifiedTopology: true\n    }\n);\nconst mongoDB = mongoose.connection;\nmongoDB.on('error', console.error.bind(console, \"Error de conexion!\"));\nmongoDB.on('open', () => console.log('Bd conectada'));\n\nconst server = new ApolloServer({ \n  typeDefs, \n  resolvers,\n  schemaDirectives: {\n    AuthDirective: AuthDirective\n  },\n  context: async ({req}) => getContext(req),\n  introspection: true,\n  playground: true,\n })\n\nserver.listen({ port: process.env.PORT || 4000 }).then(({ url }) => {\n  console.log(`ğŸš€  Server ready at ${url}`);\n})"],"file":"index.js"}