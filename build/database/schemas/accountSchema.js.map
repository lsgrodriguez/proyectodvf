{"version":3,"sources":["../../../src/database/schemas/accountSchema.js"],"names":["schema","mongoose","Schema","accountSchema","user","type","String","required","email","password","role","gender","subscription","profileImage","comments","Types","ObjectId","ref","timestamps","prototype","valueOf","toString","pre","next","account","bcrypt","genSalt","error","salt","hash"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA,IAAMA,MAAM,GAAGC,qBAASC,MAAxB;AACA,IAAMC,aAAa,GAAG,IAAIH,MAAJ,CAClB;AACII,EAAAA,IAAI,EAAE;AACFC,IAAAA,IAAI,EAAEC,MADJ;AAEFC,IAAAA,QAAQ,EAAE;AAFR,GADV;AAKIC,EAAAA,KAAK,EAAE;AACHH,IAAAA,IAAI,EAAEC,MADH;AAEHC,IAAAA,QAAQ,EAAE;AAFP,GALX;AASIE,EAAAA,QAAQ,EAAE;AACNJ,IAAAA,IAAI,EAAEC,MADA;AAENC,IAAAA,QAAQ,EAAE;AAFJ,GATd;AAaIG,EAAAA,IAAI,EAAC;AACDL,IAAAA,IAAI,EAACC,MADJ;AAED,YAAM,CAAC,OAAD,EAAU,MAAV,CAFL;AAGDC,IAAAA,QAAQ,EAAE;AAHT,GAbT;AAkBII,EAAAA,MAAM,EAAE;AACJN,IAAAA,IAAI,EAAEC,MADF;AAEJ,YAAM,CAAC,GAAD,EAAM,GAAN;AAFF,GAlBZ;AAsBIM,EAAAA,YAAY,EAAE;AACVP,IAAAA,IAAI,EAAEC,MADI;AAEV,YAAM,CAAC,IAAD,EAAO,IAAP,EAAa,KAAb;AAFI,GAtBlB;AA0BIO,EAAAA,YAAY,EAAC;AACTR,IAAAA,IAAI,EAAEC;AADG,GA1BjB;AA6BIQ,EAAAA,QAAQ,EAAE,CAAC;AACPT,IAAAA,IAAI,EAAEL,MAAM,CAACe,KAAP,CAAaC,QADZ;AAEPC,IAAAA,GAAG,EAAE;AAFE,GAAD;AA7Bd,CADkB,EAmClB;AAAEC,EAAAA,UAAU,EAAE;AAAd,CAnCkB,CAAtB;;AAsCAjB,qBAASc,KAAT,CAAeC,QAAf,CAAwBG,SAAxB,CAAkCC,OAAlC,GAA4C,YAAY;AACpD,SAAO,KAAKC,QAAL,EAAP;AACH,CAFD;;AAIAlB,aAAa,CAACmB,GAAd,CAAkB,MAAlB,EAA0B,UAASC,IAAT,EAAe;AACrC,MAAIC,OAAO,GAAG,IAAd;;AACAC,qBAAOC,OAAP,CAAe,EAAf,EAAmB,UAASC,KAAT,EAAgBC,IAAhB,EAAqB;AACpCH,uBAAOI,IAAP,CAAYL,OAAO,CAACf,QAApB,EAA8BmB,IAA9B,EAAoC,UAASD,KAAT,EAAgBE,IAAhB,EAAqB;AACrD,UAAIF,KAAJ,EAAW,OAAOJ,IAAI,CAACI,KAAD,CAAX;AACXH,MAAAA,OAAO,CAACf,QAAR,GAAmBoB,IAAnB;AACAN,MAAAA,IAAI;AACP,KAJD;AAKH,GAND;AAOH,CATD;eAWepB,a","sourcesContent":["import mongoose from 'mongoose';\nimport bcrypt from 'bcrypt'\nconst schema = mongoose.Schema;\nconst accountSchema = new schema (\n    {\n        user: {\n            type: String,\n            required: true,\n        },\n        email: {\n            type: String,\n            required: true,\n        },\n        password: {\n            type: String,\n            required: true,\n        },\n        role:{\n            type:String,\n            enum: ['admin', 'user'],\n            required: true\n        },\n        gender: {\n            type: String,\n            enum: ['H', 'M'],\n        },\n        subscription: {\n            type: String,\n            enum: ['30', '60', '120']\n        },\n        profileImage:{\n            type: String\n        },\n        comments: [{\n            type: schema.Types.ObjectId,\n            ref: 'comment'\n        }]\n    },\n    { timestamps: true}\n)\n\nmongoose.Types.ObjectId.prototype.valueOf = function () {\n    return this.toString();\n}\n\naccountSchema.pre(\"save\", function(next) {\n    let account = this\n    bcrypt.genSalt(10, function(error, salt){\n        bcrypt.hash(account.password, salt, function(error, hash){\n            if (error) return next(error)\n            account.password = hash\n            next()\n        })\n    })\n})\n\nexport default accountSchema;"],"file":"accountSchema.js"}