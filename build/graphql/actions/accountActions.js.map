{"version":3,"sources":["../../../src/graphql/actions/accountActions.js"],"names":["Date","prototype","addDays","days","date","valueOf","setDate","getDate","createToken","userData","exp","getTime","payload","_id","id","email","user","token","jwt","sign","process","env","JWT","addAccountAction","accountData","accountsModel","create","newAccount","console","log","updateAccountAction","filter","update","findOneAndUpdate","showAccounts","find","populate","findAccountAction","findOne","loginAccountAction","password","account","bcrypt","compare","valid"],"mappings":"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","sourcesContent":["import jwt from 'jsonwebtoken';\nimport { accountsModel } from '../../database/models';\nimport bcrypt from 'bcrypt'\n\n//Esto sirve para agregar expiracion a los token...\nDate.prototype.addDays = function (days) {\n    const date = new Date(this.valueOf());\n    date.setDate(date.getDate() + days);\n    return date;\n}\n\nconst createToken = (userData) => {\n    const exp = new Date().addDays(5).getTime();\n    const payload = {\n      _id: userData.id,\n      email: userData.email,\n      user: userData.user,\n      exp,\n    }\n  \n    const token = jwt.sign(payload, process.env.JWT);\n    return token;\n}\n\nconst addAccountAction = async (accountData) => {\n  try {\n    const newAccount = await accountsModel.create(accountData)\n    console.log(newAccount)\n    const token = createToken(newAccount);\n    return {token};\n  } catch (error) {\n    console.log(\"TCL: error\", error)\n  }\n};\n\nconst updateAccountAction = async (filter, update) => {\n  try {\n    return await accountsModel.findOneAndUpdate(filter, update, { new: true } );\n  } catch (error) {\n    console.log(\"TCL: updateAccountAction -> error\", error)\n  }\n}\n\nconst showAccounts = async () =>{\n  try {\n    return await accountsModel.find().populate('comments');\n  } catch (error) {\n    console.log(\"TCL: showAccounts -> error\", error)\n  }\n}\n\nconst findAccountAction = async (filter) => {\n  try {\n    return await accountsModel.findOne(filter)\n  } catch (error) {\n    console.log(\"TCL: findAccountAction -> error\", error)\n  }\n}\n\nconst loginAccountAction = async (email, password) => {\n  try {\n    const filter = { email: email };\n    try {\n      const account = await findAccountAction(filter)\n      const valid = await bcrypt.compare(password, account.password)\n      if (valid) {\n        const token = createToken(account);\n        return {token};\n      }\n    } catch (error) {\n      return error\n    }\n  } catch (error) {\n    console.log(\"TCL: loginAccountAction -> error\", error)\n  }\n}\n\nexport {\n  addAccountAction,\n  updateAccountAction,\n  findAccountAction,\n  showAccounts,\n  loginAccountAction\n}"],"file":"accountActions.js"}