{"version":3,"sources":["../../../src/graphql/actions/authActions.js"],"names":["AuthDirective","field","resolve","defaultFieldResolver","args","ctx","user","apply","AuthenticationError","SchemaDirectiveVisitor","getContext","req","token","headers","authorization","undefined","jwt","verify","process","env","JWT","error","result","_id"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;AACA;;AAEA;;AAIA;;;;;;IAEMA,a;;;;;;;;;;;;yCACmBC,K,EAAM;AAAA,2BACoBA,KADpB,CACfC,OADe;AAAA,UACfA,OADe,+BACLC,6BADK;AAEvBF,MAAAA,KAAK,CAACC,OAAN;AAAA;AAAA;AAAA;AAAA,mCAAgB;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA,0CAAmBE,IAAnB;AAAmBA,kBAAAA,IAAnB;AAAA;;AACNC,gBAAAA,GADM,GACAD,IAAI,CAAC,CAAD,CADJ;;AAAA,qBAERC,GAAG,CAACC,IAFI;AAAA;AAAA;AAAA;;AAAA;AAAA,uBAGKJ,OAAO,CAACK,KAAR,CAAc,IAAd,EAAoBH,IAApB,CAHL;;AAAA;AAAA;;AAAA;AAAA,sBAKF,IAAII,wCAAJ,CAAwB,6DAAxB,CALE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAhB;AASH;;;EAZuBC,2C;;;;AAe5B,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,GAAD,EAAS;AACxB,MAAI;AACA,QAAMC,KAAK,GAAGD,GAAG,CAACE,OAAJ,CAAYC,aAA1B;AACA,QAAI,yBAAOF,KAAP,cAAwBG,SAAxB,0DAAwBA,SAAxB,EAAJ,EAAuC,OAAOJ,GAAP;AACvC,WAAOK,yBAAIC,MAAJ,CACHL,KADG,EAEHM,OAAO,CAACC,GAAR,CAAYC,GAFT;AAAA;AAAA;AAAA;AAAA;AAAA,mCAGH,kBAAeC,KAAf,EAAsBC,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACQD,KADR;AAAA;AAAA;AAAA;;AAAA,kDACsBV,GADtB;;AAAA;AAAA;AAAA;AAAA,uBAG2B,uCAAkB;AAAEY,kBAAAA,GAAG,EAAED,MAAM,CAACC;AAAd,iBAAlB,CAH3B;;AAAA;AAGcjB,gBAAAA,IAHd;AAAA,oEAIoBK,GAJpB;AAIyBL,kBAAAA,IAAI,EAAJA;AAJzB;;AAAA;AAAA;AAAA;AAAA,kDAMeK,GANf;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAHG;;AAAA;AAAA;AAAA;AAAA,QAAP;AAaH,GAhBD,CAgBE,OAAOU,KAAP,EAAc;AACZ,WAAOV,GAAP;AACH;AACJ,CApBD","sourcesContent":["import jwt from 'jsonwebtoken'\nimport { findAccountAction } from '../actions/accountActions'\n\nimport {\n    SchemaDirectiveVisitor,\n    AuthenticationError\n} from 'apollo-server-express'\nimport { defaultFieldResolver } from 'graphql'\n\nclass AuthDirective extends SchemaDirectiveVisitor {\n    visitFieldDefinition(field){\n        const { resolve = defaultFieldResolver } = field\n        field.resolve = async function (...args) {\n            const ctx = args[2]            \n            if (ctx.user){\n                return await resolve.apply(this, args)\n            } else {\n                throw new AuthenticationError(\"Necesitas estar logeado para poder realizar operaciones..:(\")\n            }            \n        }\n\n    }\n}\n\nconst getContext = (req) => {\n    try {        \n        const token = req.headers.authorization\n        if (typeof token === typeof undefined) return req\n        return jwt.verify(\n            token,\n            process.env.JWT,\n            async function(error, result){\n                if (error) return req\n                try {\n                    const user = await findAccountAction({ _id: result._id})                   \n                    return { ...req, user }                    \n                } catch (error) {\n                    return req\n                }\n            }\n        )\n    } catch (error) {\n        return req\n    }\n}\n\nexport {\n    AuthDirective,\n    getContext\n}\n\n\n\n"],"file":"authActions.js"}